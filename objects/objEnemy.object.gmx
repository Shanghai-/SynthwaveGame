<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize all the variables!</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[4] = 1;
beat = 0;

depth = -1;

tell = 0;

vulnerable = false;

position = global.num_spots - 1;
space = global.spot_array[position];

planned_action = enemy_actions.choose_action;
beats_till_planned_action = 0;
attack_direction = -1;
range = 1;

hurtbox = noone;
image_speed = 0;

moving_left = false;
moving_right = false;

next_spot_index = 0;

healthbar = instance_create(10, 10, objBar);
with (healthbar) {
    max_pips = 10;
    cur_pips = 10;
    base_x = 950;
    base_y = 70;
    pip_spr = sprEnemyHealthPip;
    text_spr = sprHealthText;
}

healthbar2 = instance_create(10, 10, objBar);
with (healthbar2) {
    max_pips = 10;
    cur_pips = 10;
    base_x = 950;
    base_y = 120;
    pip_spr = sprEnemyHealthPip;
    text_spr = sprHealthText;
    draw_bar_text = false;
}
/*
healthbar3 = instance_create(10, 10, objBar);
with (healthbar3) {
    max_pips = 10;
    cur_pips = 10;
    base_x = 950;
    base_y = 170;
    pip_spr = sprEnemyHealthPip;
    text_spr = sprHealthText;
    draw_bar_text = false;
}*/

shaded_red = false;
alive = true;

sky_attack_spots = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>You Win</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rmYouWin);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Removes red shader</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shaded_red = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Quarter Note Alarm</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alive) {
    alarm[4] = global.quarter_note;
} else {
    exit;
}

beats_till_planned_action--;

// can turn if not planning an action
if (planned_action == enemy_actions.none || planned_action == enemy_actions.choose_action) {
    if (instance_find(objPlayer, 0).x &lt; x) {
        image_xscale = -1;
        attack_direction = -1;
    } else {
        image_xscale = 1;
        attack_direction = 1;
    }
}

if (moving_right &amp;&amp; x &gt;= next_spot.x) {
    moving_right = false;
    hspeed = 0;
    spot_index = next_spot_index;
    x = next_spot.x;
    vulnerable = false;
    planned_action = enemy_actions.choose_action;
    beats_till_planned_action = 3;
} else if (moving_left &amp;&amp; x &lt;= next_spot.x) {
    moving_left = false;
    hspeed = 0;
    spot_index = next_spot_index;
    x = next_spot.x;
    vulnerable = false;
    planned_action = enemy_actions.choose_action;
    beats_till_planned_action = 3;
}

if (beats_till_planned_action &lt;= 0) {
    if (planned_action == enemy_actions.none) {
        vulnerable = false;
        planned_action = enemy_actions.choose_action;
        beats_till_planned_action = 2;
    } else if (planned_action == enemy_actions.weak) {
        image_index = 1;
        var hitspace = global.spot_array[spot_index + (range * attack_direction)];
        hurtbox = instance_create(hitspace.x, hitspace.y, objHurtboxEnemy);
        hurtbox.blockable = true;
        var bomb = instance_create(hitspace.x - 10, hitspace.y, objWeakAttack);
        bomb.parent_enemy = id;
        scrClearSpots();
        planned_action = enemy_actions.choose_action;
        beats_till_planned_action = 2;    
    } else if (planned_action == enemy_actions.long) {
        var spots = array_length_1d(global.spot_array);
        for (var i = spot_index + attack_direction; i &gt;= 0 &amp;&amp; i &lt; spots; i += attack_direction) {
            var hitspace = global.spot_array[i];
            var hbox = instance_create(hitspace.x, hitspace.y, objHurtboxEnemy);
            hbox.blockable = false;
        }
        var laserstart = global.spot_array[spot_index];
        var laserY = laserstart.y - 260;
        if (attack_direction &lt; 0) {
            laserX = laserstart.x - 2000;
        } else {
            laserX = laserstart.x;
        }
        instance_create(laserX, laserY, objLaserLong);
        scrClearSpots();
        planned_action = enemy_actions.choose_action;
        beats_till_planned_action = 2;
    } else if (planned_action == enemy_actions.sky) {
        var spots = array_length_1d(global.spot_array);
        for (var i = 0; i &lt; spots; i += 1) {
            var hitspace = global.spot_array[i];
            if (hitspace.sprite == sprSpotDanger) {
                var hbox = instance_create(hitspace.x, hitspace.y, objHurtboxEnemy);
                hbox.blockable = true;
                var laser = instance_create(hitspace.x - 10, hitspace.y - 10, objLaserLong);
                laser.image_angle += 90;
                var explosion = instance_create(hitspace.x + 5, hitspace.y, objSkyBomb);
            }
        }
        instance_create(0, 0, objScreenShake);
        scrClearSpots();
        planned_action = enemy_actions.choose_action;
        beats_till_planned_action = 2;
    } else if (planned_action == enemy_actions.choose_action) {
        image_index = 0;
        if (abs(player.spot_index - spot_index) == 1) {
            planned_action = choose(enemy_actions.sky, enemy_actions.long, enemy_actions.none, enemy_actions.weak, enemy_actions.weak);    
        } else {
            planned_action = choose(enemy_actions.sky, enemy_actions.long, enemy_actions.move, enemy_actions.move, enemy_actions.move);
        }
        if (planned_action == enemy_actions.weak) {
            vulnerable = true;
            can_move = false;
            attack = 2;
            range = 1;
            hitspace = global.spot_array[spot_index + (range * attack_direction)];
            with (hitspace) {
               sprite = sprSpotDanger;
            }
            beats_till_planned_action = 2;
        } else if (planned_action == enemy_actions.long) {
            scrEnemyLongPrepare();
            image_index = 1;
            beats_till_planned_action = 4;
        } else if (planned_action == enemy_actions.sky){
            scrEnemySkyPrepare();
            image_index = 1;
            beats_till_planned_action = 4;
        } else if (planned_action == enemy_actions.move) {
            if (player.spot_index - spot_index &gt; 0) {
                moving_right = true;
                next_spot_index = spot_index + 1;
                hspeed = 20; 
            } else {
                moving_left = true;
                next_spot_index = spot_index - 1;
                hspeed = -20; 
            }
            next_spot = global.spot_array[next_spot_index];
            if (next_spot.occupied) {
                moving_left = false;
                moving_right = false;
                hspeed = 0;
                planned_action = enemy_actions.choose_action; 
            } else {
                next_spot.occupied = true;
                global.spot_array[spot_index].occupied = false;
                vulnerable = false;
            }
        } else if (planned_action == enemy_actions.none){
            vulnerable = false;
            can_move = true;
        }
    }
}

show_debug_message(planned_action);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!alive) {
    image_alpha -= 0.02;
}

if (moving_right &amp;&amp; x &gt;= next_spot.x || moving_left &amp;&amp; x &lt;= next_spot.x) {
    hspeed = 0;
    x = next_spot.x;
}

if (global.time_stopped) {
    if (alarm[4] &gt; 0) alarm[4]++;
    if (alarm[6] &gt; 0) alarm[6]++;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objHurtboxPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (vulnerable || !other.blockable) {
    instance_create(x, y, objScreenShake);
    shaded_red = true;
    alarm[6] = 15;
    vulnerable = false;
    if (healthbar.cur_pips &gt; 0) {
        healthbar.cur_pips -= 1;
    } else if (healthbar2.cur_pips &gt; 0) {
        healthbar2.cur_pips -= 1;
        if (healthbar2.cur_pips &lt; 1) {
            alive = false;
            alarm[7] = room_speed * 2;
            effect_create_above(ef_explosion, x, y - 200, 2, c_white);
            alarm[1] = 1.5 * room_speed;
        }
    }
} else {
    image_index = 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (shaded_red) {
    shader_set(shaderDamage);
    draw_self();
    shader_reset();  
} else {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
