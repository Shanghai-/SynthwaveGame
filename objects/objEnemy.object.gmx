<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize all the variables!</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[4] = (global.bps / 4) * room_speed;
beat = 0;

depth = -1;

idle = 0;
tell = 0;
attack = 0;
vuln = true;

position = global.num_spots - 1;
space = global.spot_array[position];

planned_action = enemy_actions.none;
beat = 0;
attack_direction = -1;
range = 1;

hurtbox = noone;
image_speed = 0;

moving_left = false;
moving_right = false;

next_spot_index = 0;

healthbar = instance_create(10, 10, objBar);
with (healthbar) {
    max_pips = 9;
    cur_pips = 9;
    base_x = 990;
    base_y = 70;
    pip_spr = sprEnemyHealthPip;
    text_spr = sprHealthText;
}

shaded_red = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>You Win</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rmYouWin);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Removes red shader</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shaded_red = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Quarter Note Alarm</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[4] = (global.bps / 4) * room_speed;

beat++;
beat = beat mod 4;

if (moving_right &amp;&amp; x &gt;= next_spot.x) {
    moving_right = false;
    hspeed = 0;
    spot_index = next_spot_index;
    x = next_spot.x;
    vulnerable = false;
    
} else if (moving_left &amp;&amp; x &lt;= next_spot.x) {
    moving_left = false;
    hspeed = 0;
    spot_index = next_spot_index;
    x = next_spot.x;
    vulnerable = false;
    
} else if (beat == 0) {
    if (planned_action != enemy_actions.none) {
        if (planned_action == enemy_actions.weak) {
            image_index = attack;
            var hitspace = global.spot_array[spot_index + (range * attack_direction)];
            hurtbox = instance_create(hitspace.x, hitspace.y, objHurtboxEnemy);
        } else if (planned_action == enemy_actions.long) {
            var spots = array_length_1d(global.spot_array);
            
            for (var i = spot_index + attack_direction; i &gt;= 0 &amp;&amp; i &lt; spots; i += attack_direction) {
                var hitspace = global.spot_array[i];
                instance_create(hitspace.x, hitspace.y, objHurtboxEnemy);
            }
            var laserstart = global.spot_array[spot_index];
            var laserY = laserstart.y - 260;
            if (attack_direction &lt; 0) {
                laserX = laserstart.x - 2000;
            } else {
                laserX = laserstart.x;
            }
            instance_create(laserX, laserY, objLaserLong);
        }
    } else {
        vulnerable = false;
    }
} else if (beat == 1) {
    if (planned_action == enemy_actions.none) {
        if (instance_find(objPlayer, 0).x &lt; x) {
            image_xscale = -1;
            attack_direction = -1;
        } else {
            image_xscale = 1;
            attack_direction = 1;
        }
    }
    var spots = array_length_1d(global.spot_array);
    for (var i = 0; i &lt; spots; i++) {
        var space = global.spot_array[i];
        with (space) {
            sprite = sprSpot;
        }
    }
    
} else if (beat == 2) {
    if (instance_find(objPlayer, 0).x &lt; x) {
        image_xscale = -1;
        attack_direction = -1;
    } else {
        image_xscale = 1;
        attack_direction = 1;
    }
    if (abs(player.spot_index - spot_index) == 1) {
       //planned_action = choose(enemy_actions.long);
       planned_action = choose(enemy_actions.long, enemy_actions.none, enemy_actions.weak, enemy_actions.weak);
        if (planned_action == enemy_actions.weak) {
            vulnerable = true;
            can_move = false;
            tell = 1;
            attack = 2;
            range = 1;
            hitspace = global.spot_array[spot_index + (range * attack_direction)];
            with (hitspace) {
                sprite = sprSpotDanger;
            }
        } else if (planned_action == enemy_actions.long) {
            vulnerable = true;
            can_move = false;
            tell = 1;
            attack = 2;
            range = 1;
            var spots = array_length_1d(global.spot_array);
            for (var i = spot_index + attack_direction; i &gt;= 0 &amp;&amp; i &lt; spots; i += attack_direction) {
                var laserhitspace = global.spot_array[i];
                with (laserhitspace) {
                    sprite = sprSpotDanger;
                }
            }
        } else {
            tell = 0;
            can_move = true;
        }
    } else {
        if (player.spot_index - spot_index &gt; 0) {
            moving_right = true;
            next_spot_index = spot_index + 1;
            hspeed = 20; 
        } else {
            moving_left = true;
            next_spot_index = spot_index - 1;
            hspeed = -20; 
        }
        next_spot = global.spot_array[next_spot_index];
        if (next_spot.occupied) {
            moving_left = false;
            moving_right = false;
            hspeed = 0;
        } else {
            planned_action = enemy_actions.move;
            tell = 0;
            next_spot.occupied = true;
            global.spot_array[spot_index].occupied = false;
            vulnerable = false;
        }
    }
    image_index = tell;        
} else if (beat == 3) {
    if (planned_action == enemy_actions.none) {
        if (instance_find(objPlayer, 0).x &lt; x) {
            image_xscale = -1;
            attack_direction = -1;
        } else {
            image_xscale = 1;
            attack_direction = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.time_stopped) {
    if (alarm[4] &gt; 0) alarm[4]++;
    if (alarm[6] &gt; 0) alarm[6]++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objHurtboxPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (vulnerable || !other.blockable) {
    instance_create(x, y, objScreenShake);
    shaded_red = true;
    alarm[6] = 15;
    if (healthbar.cur_pips &gt; 0) {
        healthbar.cur_pips -= 1;
        if (healthbar.cur_pips &lt; 1) {
            alarm[7] = 1;
            //global.time_stopped = true;
            //alarm[1] = 1.5 * room_speed;
        }
        vulnerable = false;
    }
} else {
    image_index = 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (shaded_red) {
    shader_set(shaderDamage);
    draw_self();
    shader_reset();  
} else {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
