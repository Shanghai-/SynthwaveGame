<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.btn_x = room_width - (room_width / 12);
global.btn_y = 580;
global.btn_offset = 70;
global.btn_txt_color = c_white;

global.bg_tri_color = make_color_rgb(244, 74, 147);
global.sel_tri_color = make_color_rgb(58, 204, 225);
global.min_ptime = 4.0;
global.max_ptime = 8.0;
global.max_pdist = 16;

global.music_volume = 100;
global.sfx_volume = 100;

if (!audio_is_playing(menuTheme)) {
    audio_stop_all();
    audio_play_sound(menuTheme, 1, true);
}

x = global.btn_x + 32;
btn_idx = 0;

btn_types[0] = btnPlay;
btn_types[1] = btnControls;
btn_types[2] = btnOptions;
btn_types[3] = btnExit;

num_buttons = array_length_1d(btn_types);

for (var i = 0; i &lt; num_buttons; i++) {
    buttons[i] = instance_create(global.btn_x, 
        global.btn_y + (global.btn_offset * i), btn_types[i]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var up_down = keyboard_check_pressed(vk_up);
var down_down = keyboard_check_pressed(vk_down);
var select_down = keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter);

if (select_down) {
    switch (btn_idx) {
        case 0:
            global.difficulty = 0;
            room_goto(rmEasy);
            break;
        case 1:
            room_goto(rmControls);
            break;
        case 2:
            room_goto(rmOptions);
            break;
        case 3:
            game_end();
            break;
    }
}

if (up_down &amp;&amp; !down_down) {
    with (buttons[btn_idx]) {
        selected = false;
    }
    btn_idx -= 1;
    if (btn_idx == -1) {
        btn_idx = num_buttons - 1;
    }
    with (buttons[btn_idx]) {
        selected = true;
    }
} else if (down_down &amp;&amp; !up_down) {
    with (buttons[btn_idx]) {
        selected = false;
    }
    btn_idx += 1;
    if (btn_idx == num_buttons) {
        btn_idx = 0;
    }
    with (buttons[btn_idx]) {
        selected = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
