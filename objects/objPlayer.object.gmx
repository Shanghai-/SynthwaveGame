<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[4] = (global.bps / 4) * room_speed;

moving_left = false;
moving_right = false;
dodging = false;
spot_index = 0;
next_spot_index = 0;

beat = 0;
wait_for_beat = false;
state = player_state.idle;

image_speed = 0;
hurtbox = noone;
attack_direction = 1;
range = 1;

healthbar = instance_create(10, 10, objBar);
with (healthbar) {
    max_pips = 8;
    cur_pips = 8;
    base_x = 20;
    base_y = 70;
    pip_spr = sprHealthPip;
    text_spr = sprHealthText;
}
overcharge_bar = instance_create(10, 40, objBar);
with (overcharge_bar) {
    max_pips = 6;
    cur_pips = 0;
    base_x = 20;
    base_y = 160;
    pip_spr = sprOverchargePip;
    text_spr = sprOverchargeText;
}

blur_particle = part_type_create();
part_type_sprite(blur_particle, sprPlayer, false, false, false);
part_type_alpha2(blur_particle, 0.5, 0);
part_type_life(blur_particle, 10, 10);
emitter = part_emitter_create(global.particle_system);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 0;
wait_for_beat = false;
state = player_state.idle;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[4] = (global.bps / 4) * room_speed;
beat++;
beat = beat mod 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Beat window expiry timer</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == player_state.countering) {
    state = player_state.blocking;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var shift_down = keyboard_check(vk_shift);
var right_down = keyboard_check(vk_right);
var left_down = keyboard_check(vk_left);
var space_down = keyboard_check(vk_space);
var a_down = keyboard_check(ord('A'));

if (!moving_left &amp;&amp; !moving_right) {
    next_spot_index = spot_index;
    if (wait_for_beat) {
        // do nothing
    } else if (a_down) {
        image_index = 3;
        state = player_state.countering;
        alarm[1] = 6;
        alarm[5] = (global.bps / 2) * room_speed;
        wait_for_beat = true;
    } else if (space_down) {
        image_index = 1;
        alarm[5] = (global.bps / 2) * room_speed;
        var hitspace = global.spot_array[spot_index + (range * attack_direction)];
        hurtbox = instance_create(hitspace.x, hitspace.y, objHurtboxPlayer);
        wait_for_beat = true;
    } else if (right_down) {
        next_spot_index = spot_index;
        if (shift_down &amp;&amp; spot_index &lt; global.num_spots - 2) {
            if (global.spot_array[spot_index + 2].occupied == false) {
                moving_right = true;
                dodging = true;
                next_spot_index = spot_index + 2;
                hspeed = 40; 
            }
        } else if (spot_index &lt; global.num_spots - 1) {
            if (global.spot_array[spot_index + 1].occupied == false) {
                moving_right = true;
                next_spot_index = spot_index + 1;
                hspeed = 20; 
            }
        }
    } else if (left_down) {
        next_spot_index = spot_index;
        if (shift_down &amp;&amp; spot_index &gt; 1) {
            if (global.spot_array[spot_index - 2].occupied == false) {
                moving_left = true;
                dodging = true;
                next_spot_index = spot_index - 2;
                hspeed = -40;
            }
        } else if (spot_index &gt; 0) {
            if (global.spot_array[spot_index - 1].occupied == false) {
                moving_left = true;
                next_spot_index = spot_index - 1;
                hspeed = -20;
            }
        }
    }
    if (moving_left || moving_right) {
        next_spot = global.spot_array[next_spot_index];
        next_spot.occupied = true;
        global.spot_array[spot_index].occupied = false;
    }
} else {
    if (moving_right &amp;&amp; x &gt;= next_spot.x) {
        moving_right = false;
        hspeed = 0;
        dodging = false;
        spot_index = next_spot_index;
        x = next_spot.x;
    } else if (moving_left &amp;&amp; x &lt;= next_spot.x) {
        moving_left = false;
        hspeed = 0;
        dodging = false;
        spot_index = next_spot_index;
        x = next_spot.x;
    }
}

if (dodging) {
    part_particles_create(global.particle_system, x, y, blur_particle, 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objHurtboxEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == player_state.countering) {
    var hitspace = global.spot_array[spot_index + 1];
    instance_create(hitspace.x, hitspace.y, objHurtboxPlayer);
    state = player_state.blocking;
    if (overcharge_bar.cur_pips &lt; overcharge_bar.max_pips) {
        overcharge_bar.cur_pips += 1;
    }
} else if (state == player_state.blocking) {
    
} else {
    image_index = 2;
    if (healthbar.cur_pips &gt; 0) {
        healthbar.cur_pips -= 1;
    }
    alarm[0] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
